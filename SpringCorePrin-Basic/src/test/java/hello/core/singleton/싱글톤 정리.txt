SingletonTest 에서 매번 객체를 새로 생성하는 것을 볼 수 있었다. 하지만, 이는 메모리 낭비가 심하다.
따라서 한 객체를 생성하고 이를 공유하는 방식을 사용하는 것이 싱글톤.

단점
1. 구현에 코드가 많이 들어감
2. 의존관계상 클라이언트가 구체 클래스에 의존한다. -> DIP 위반
3. 테스트하기 어렵다
4. 내부 속성의 변경 혹은 초기화가 어렵다.
5. 결론적으로 유연성이 떨어져, 안티패턴으로 불리기도 한다.

이런 문제점들을 모두 제거해주고 쓸 수 있게 해주는게 스프링이다.

그래도 여기서 문제가 생길 수가 있는데, statefulService에서 주석 처리한 부분은 공유 변수를 쓰기 때문에,
그로 인한 문제가 생기지만, 이는 객체마다 지역변수로 바꿔주면 해결할 수 있다.